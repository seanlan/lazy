//generated by lazy
//author: seanlan

package {{.DaoPackageName}}

import (
	"context"
	"{{.ModelFQPN}}"
	"gorm.io/gorm/clause"
)

func Count{{.StructName}}(ctx context.Context, expr clause.Expression) (totalRows int64, err error) {
	db := GetDB(ctx).WithContext(ctx).Model(&{{.ModelPackageName}}.{{.StructName}}{})
	if expr != nil {
		db = db.Where(expr)
	}
	db.Count(&totalRows)
	return totalRows, nil
}

func Sum{{.StructName}}(ctx context.Context, sumField {{.ModelPackageName}}.FieldBase, expr clause.Expression) (sum int64, err error) {
	var sumValue = struct {
		N int64 `json:"n"`
	}{}
	db := GetDB(ctx).WithContext(ctx).Model(&{{.ModelPackageName}}.{{.StructName}}{})
	if expr != nil {
		db = db.Where(expr)
	}
	err = db.Select("sum(" + sumField.FieldName + ") as n").Scan(&sumValue).Error
	return sumValue.N, err
}

func FetchAll{{.StructName}}(ctx context.Context, records interface{}, expr clause.Expression, page, pagesize int, orders ...string) (err error) {
	db := GetDB(ctx).WithContext(ctx).Model(&{{.ModelPackageName}}.{{.StructName}}{})
	if expr != nil {
		db = db.Where(expr)
	}
	if page > 0 {
		offset := (page - 1) * pagesize
		db = db.Offset(offset).Limit(pagesize)
	} else {
		db = db.Limit(pagesize)
	}
	for _, order := range orders {
		db = db.Order(order)
	}
	if err = db.Find(records).Error; err != nil {
		err = ErrNotFound
		return err
	}
	return nil
}

func Fetch{{.StructName}}(ctx context.Context, record interface{}, expr clause.Expression, orders ...string) (err error) {
	db := GetDB(ctx).WithContext(ctx).Model(&{{.ModelPackageName}}.{{.StructName}}{})
	if expr != nil {
		db = db.Where(expr)
	}
	for _, order := range orders {
		db = db.Order(order)
	}
	if err = db.First(record).Error; err != nil {
		err = ErrNotFound
		return err
	}
	return nil
}

func Add{{.StructName}}(ctx context.Context, d *{{.ModelPackageName}}.{{.StructName}}) (RowsAffected int64, err error) {
	db := GetDB(ctx).WithContext(ctx).Model(&{{.ModelPackageName}}.{{.StructName}}{}).Create(d)
	if err = db.Error; err != nil {
		return -1, ErrInsertFailed
	}
	return db.RowsAffected, nil
}

func Adds{{.StructName}}(ctx context.Context, d *[]{{.ModelPackageName}}.{{.StructName}}) (RowsAffected int64, err error) {
	db := GetDB(ctx).WithContext(ctx).Model(&{{.ModelPackageName}}.{{.StructName}}{}).Create(d)
	if err = db.Error; err != nil {
		return -1, ErrInsertFailed
	}
	return db.RowsAffected, nil
}

func Update{{.StructName}}(ctx context.Context, updated *{{.ModelPackageName}}.{{.StructName}}) (RowsAffected int64, err error) {
	db := GetDB(ctx).WithContext(ctx).Save(updated)
	if err = db.Error; err != nil {
		return -1, ErrUpdateFailed
	}
	return db.RowsAffected, nil
}

func Updates{{.StructName}}(ctx context.Context, expr clause.Expression, updated map[string]interface{}) (RowsAffected int64, err error) {
	db := GetDB(ctx).WithContext(ctx).Model(&{{.ModelPackageName}}.{{.StructName}}{})
	if expr != nil {
		db = db.Where(expr)
	}
	db = db.Updates(updated)
	if err = db.Error; err != nil {
		return -1, err
	}
	return db.RowsAffected, nil
}

func Upsert{{.StructName}}(ctx context.Context, d *{{.ModelPackageName}}.{{.StructName}}, upsert map[string]interface{}) (RowsAffected int64, err error) {
	db := GetDB(ctx).WithContext(ctx).Model(&{{.ModelPackageName}}.{{.StructName}}{}).Clauses(clause.OnConflict{
		DoUpdates: clause.Assignments(upsert),
	}).Create(d)
	if err = db.Error; err != nil {
		return -1, ErrInsertFailed
	}
	return db.RowsAffected, nil
}

func Delete{{.StructName}}(ctx context.Context, expr clause.Expression) (rowsAffected int64, err error) {
	db := GetDB(ctx).WithContext(ctx).Model(&{{.ModelPackageName}}.{{.StructName}}{})
	if expr != nil {
		db = db.Where(expr)
	}
	db = db.Delete({{.ModelPackageName}}.{{.StructName}}{})
	if err = db.Error; err != nil {
		return -1, err
	}
	return db.RowsAffected, nil
}
