package {{.Package}}

import "gorm.io/gorm/clause"

type FieldBase struct {
	TableName string // 表名
	FieldName string // 字段名
}

func (field FieldBase) Eq(value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Eq{Column: filedName, Value: value}
}

func (field FieldBase) Neq(value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Neq{Column: filedName, Value: value}
}

func (field FieldBase) In(value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Expr{SQL: filedName + " IN ? ", Vars: []interface{}{value}}
}

func (field FieldBase) NotIn(value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Expr{SQL: filedName + " NOT IN ? ", Vars: []interface{}{value}}
}

func (field FieldBase) Gt(value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Gt{Column: filedName, Value: value}
}

func (field FieldBase) Gte(value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Gte{Column: filedName, Value: value}
}

func (field FieldBase) Lt(value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Lt{Column: filedName, Value: value}
}

func (field FieldBase) Lte(value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Lte{Column: filedName, Value: value}
}

func (field FieldBase) Like(value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Like{Column: filedName, Value: value}
}

func (field FieldBase) NotLike(value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Expr{SQL: filedName + " NOT LIKE ", Vars: []interface{}{value}}
}

func (field FieldBase) Add(value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Expr{
		SQL:  filedName + " + ?",
		Vars: []interface{}{value},
	}
}

func (field FieldBase) Mul(value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Expr{
		SQL:  filedName + " * ?",
		Vars: []interface{}{value},
	}
}

func (field FieldBase) IF(symbol string, c, value interface{}, full ...bool) clause.Expression {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return clause.Expr{
		SQL:  "IF(" + filedName + symbol + " ? ,?," + field.FieldName + ")",
		Vars: []interface{}{c, value},
	}
}

func (field FieldBase) Desc(full ...bool) string {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return filedName + " DESC"
}

func (field FieldBase) Asc(full ...bool) string {
	filedName := field.FieldName
	if len(full) > 0 && full[0] {
		filedName = field.TableName + "." + field.FieldName
	}
	return filedName + " ASC"
}

